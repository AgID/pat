<?php///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////PAT - Portale Amministrazione Trasparente///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////versione 1.5 - //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	/*	* Copyright 2015,2017 - AgID Agenzia per l'Italia Digitale	*	* Concesso in licenza a norma dell'EUPL, versione 1.1 o	successive dell'EUPL (la "Licenza")– non appena saranno	approvate dalla Commissione europea;	* Non è possibile utilizzare l'opera salvo nel rispetto	della Licenza.	* È possibile ottenere una copia della Licenza al seguente	indirizzo:	*	* https://joinup.ec.europa.eu/software/page/eupl	*	* Salvo diversamente indicato dalla legge applicabile o	concordato per iscritto, il software distribuito secondo	i termini della Licenza è distribuito "TAL QUALE",	* SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,	esplicite o implicite.	* Si veda la Licenza per la lingua specifica che disciplina	le autorizzazioni e le limitazioni secondo i termini della	Licenza.	*/ 	/**	 * @file	 * ServerWS.php	 * 	 * @Descrizione	 * Servizio WebServices SOAP per PAT	 *	 */ require_once('inc/config.php');require_once('inc/inizializzazione.php');ini_set("soap.wsdl_cache_enabled", "0"); // disabling WSDL cacheini_set('memory_limit','1024M');ini_set('max_execution_time', 120);class ServerWS {		var $utenteEnte;	/**	 * verifica se il servizio sia raggiungibile	 */    function sayHello($name) {        return "Ciao ".$name."!";    }    function getOggetti($request) {        global $dati_db,$database,$configurazione;        		$response = new ResponseWS();        $request = $this->fixRequest($request);        //        $f = fopen("temp/debugFixRequest.html", "w+");//    	  ob_start();//        echo "<pre>";//        print_r($request);//        echo "</pre>";//        $c = ob_get_contents();//        ob_end_clean();//        fwrite($f, $c."\n");//        fclose($f);                //Controllo autorizzazioni        if(!$this->isAuthenticated($request->value['token'], $request->value['user'])) {            return $this->permessiNegatiResponse();        }                $campiOggetto = $this->getCampiOggetto($request->value['tipo']);        if($campiOggetto == '') {        	$response->message = $this->utf8_encode_recursive("Oggetto non valido.");	        return $response;        }                //devo prendere la stringa per la query in base ai parametri passati        if(count($request->campiRequest) > 0) {        	$condizioneAggiuntiva = true;        	$condizione = $this->elaboraCondizioni($request->campiRequest, $request->value['tipo']);        	if($condizione['errore'] == 'campo_non_valido') {		        $response->message = $this->utf8_encode_recursive("Campo [".$condizione['campo_non_valido']."] non valido nelle condizioni di ricerca.");		        return $response;        	}        }				if($request->value['tipo'] == 'requisiti') {			$where = " WHERE 1 = 1 ";		} else {			$where = " WHERE ".$this->getCampoEnte($request->value['tipo'])." = ".$this->utenteEnte['id_ente_admin']." ";		}        $query = "SELECT ".$campiOggetto." FROM ".$dati_db['prefisso'].$this->getTabellaOggetto($request->value['tipo']).$where;		if($condizioneAggiuntiva) {			$query .= $condizione['condizione'];		}		$queryOrder = " ORDER BY id ";		$queryLimit = " LIMIT 0,1000 ";		if($request->value['offset'] > 0) {			$queryLimit = " LIMIT ".$request->value['offset'].",1000 ";		}		$query .= $queryOrder.$queryLimit;		        if( !($result = $database->connessioneConReturn($query)) ) {            $message = "Errore nella selezione dei dati";        }        $istanzeDB = $database->sqlArrayAss($result, MYSQL_ASSOC);        if(!$istanzeDB) {            $message = "Nessun risultato";        } else {            $message = "";            $istanzeDB_export = array();			$tipo = $request->value['tipo'];			$campiAllegati = explode(",", $this->getCampiAllegati($tipo));            foreach((array)$istanzeDB as $istanza) {		    	foreach((array)$campiAllegati as $nomeCampo) {		    		if($istanza[$nomeCampo] != '') {		    			$nomeFile = explode("O__O", $istanza[$nomeCampo]);		    			if($request->value['allegati']) {				            //ricostruzione allegati			    			$istanza["nome_file_".$nomeCampo] = $nomeFile[1];		    				$istanza[$nomeCampo] = base64_encode(file_get_contents("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$istanza[$nomeCampo]));		    			} else {		    				$istanza[$nomeCampo] = $nomeFile[1];		    			}		    		}		    	}		    	$istanzeDB_export[] = $istanza;        	}            $istanzeDB = $istanzeDB_export;        }		        $ret = $this->utf8_encode_recursive($istanzeDB);        $response->message = $this->utf8_encode_recursive($message);        $response->valori[0] = $ret;                $this->logRequest($request, $response, "getOggetti -> ".$query);        return $response;    }    function addOggetto($request) {        global $dati_db,$database,$configurazione;            	$response = new ResponseWS();        $request = $this->fixRequest($request);    	        //Controllo autorizzazioni        if(!$this->isAuthenticated($request->value['token'], $request->value['user'])) {            return $this->permessiNegatiResponse();        }                if($this->getTabellaOggetto($request->value['tipo']) == '') {	        $response->message = $this->utf8_encode_recursive("Tipo di oggetto non specificato oppure non valido.");	        return $response;        }                switch($request->value['tipo']) {        	case "strutture":        	case "personale":        	case "commissioni":        	case "societa":        	case "procedimenti":        	case "regolamenti":        	case "modulistica":        	case "normativa":        	case "bilanci":        	case "fornitori":        	case "gare":        	case "concorsi":        	case "sovvenzioni":        	case "incarichi":        	case "provvedimenti":        	case "oneri":        		$return = $this->inserisciRecord($request);        	break;        }        if($return['errore'] != '') {        	$response->message = $this->utf8_encode_recursive($return['errore']);        	return $response;        }                $response->valori[0] = $return['record'];        		$this->logRequest($request, $response, "addOggetto -> ".$return['query']);        return $response;    }        function editOggetto($request) {        global $dati_db,$database,$configurazione;            	$response = new ResponseWS();        $request = $this->fixRequest($request);    	        //Controllo autorizzazioni        if(!$this->isAuthenticated($request->value['token'], $request->value['user'])) {            return $this->permessiNegatiResponse();        }                if($this->getTabellaOggetto($request->value['tipo']) == '') {	        $response->message = $this->utf8_encode_recursive("Tipo di oggetto non specificato oppure non valido.");	        return $response;        }                        switch($request->value['tipo']) {        	case "strutture":        	case "personale":        	case "commissioni":        	case "societa":        	case "procedimenti":        	case "regolamenti":        	case "modulistica":        	case "normativa":        	case "bilanci":        	case "fornitori":        	case "gare":        	case "concorsi":        	case "sovvenzioni":        	case "incarichi":        	case "provvedimenti":        	case "oneri":        		$return = $this->inserisciRecord($request, "edit");        	break;        }        if($return['errore'] != '') {        	$response->message = $this->utf8_encode_recursive($return['errore']);        	return $response;        }                $response->valori[0] = $return['record'];        		$this->logRequest($request, $response, "editOggetto -> ".$return['query']);        return $response;    }	function deleteOggetto($request) {        global $dati_db,$database,$configurazione;            	$response = new ResponseWS();        $request = $this->fixRequest($request);    	        //Controllo autorizzazioni        if(!$this->isAuthenticated($request->value['token'], $request->value['user'])) {            return $this->permessiNegatiResponse();        }                if($this->getTabellaOggetto($request->value['tipo']) == '') {	        $response->message = $this->utf8_encode_recursive("Tipo di oggetto non specificato oppure non valido.");	        return $response;        }                $return = $this->eliminaOggetto($request);        if($return['errore'] != '') {        	$response->message = $this->utf8_encode_recursive($return['errore']);        	return $response;        }		        $response->valori[0] = $return['record'];        		$this->logRequest($request, $response, "deleteOggetto -> ".$return['query']);        return $response;    }    ////////////////////////////////////////////////////////////////////////////    //Funzioni non esposte come Web Services (interne)    ////////////////////////////////////////////////////////////////////////////        function eliminaOggetto($request) {    	global $dati_db,$database,$configurazione;    	    	$tipo = $request->value['tipo'];    	$campiObbligatori = "id";    	$campiObbligatori = explode(",",$campiObbligatori);    	foreach((array)$request->campiRequest as $c) {    		$campiRequest[$c->nome] = $c->valore;    	}    	//inizio controllo dei campi obbligatori    	foreach((array)$campiObbligatori as $obb) {    		if($campiRequest[$obb] == '') {    			$return['errore'] .= "Il campo [".$obb."] � obbligatorio per l'eliminazione di un record. ";    		}    	}    	if($return['errore'] != '') {    		return $return;    	}    	//verifiche sul tipo da eliminare    	switch($tipo) {    		case "strutture":        	case "personale":        	case "commissioni":        	case "societa":        	case "procedimenti":        	case "regolamenti":        	case "modulistica":        	case "normativa":        	case "bilanci":        	case "fornitori":        	case "gare":        	case "concorsi":        	case "sovvenzioni":        	case "incarichi":        	case "provvedimenti":        	case "oneri":        		$return = $this->eliminaRecord($request);        	break;        }    }        function eliminaRecord($request) {    	global $dati_db,$database,$configurazione;    	    	$tipo = $request->value['tipo'];    	foreach((array)$request->campiRequest as $c) {    		$campiRequest[$c->nome] = $c->valore;    	}    	$istanzaOggetto = mostraDatoOggetto($campiRequest['id'], $this->getIdOggetto($tipo), '*');		if($istanzaOggetto['id'] and $istanzaOggetto[$this->getCampoEnte($request->value['tipo'])] == $this->utenteEnte['id_ente_admin']) {						$queryDel = "DELETE FROM ".$dati_db['prefisso'].$this->getTabellaOggetto($request->value['tipo']).					" WHERE id = ".$campiRequest['id'];	   			   		if( !($result = $database->connessioneConReturn($queryDel)) ) {	            $return['errore'] = "Errore nella cancellazione dei dati ".$queryDel;	            return $return;	        }			//eliminazione allegati			$campiAllegati = explode(",", $this->getCampiAllegati($tipo));	    	foreach((array)$campiAllegati as $allegato) {	    		if($istanzaOggetto[$allegato] != '' and file_exists("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$istanzaOggetto[$allegato])) {	    			@unlink("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$istanzaOggetto[$allegato]);	    		}	    	}	    	$ret = $this->utf8_encode_recursive(array());	        $return['record'] = $ret;	        $return['query'] = $queryDel;	        return $return;		} else {			$return['errore'] = "Impossibile modificare il record: permesso negato. (err. 1)";			return $return;		}    }        function inserisciRecord($request, $contesto = "insert") {    	global $dati_db,$database,$configurazione;    	    	$return = '';    	$insert = array();    	$campiRequest = array();    	    	$tipo = $request->value['tipo'];    	$campiObbligatori = $this->getCampiObbligatori($tipo);    	if($contesto == 'edit') {    		$campiObbligatori .= ",id";    	}    	$campiObbligatori = explode(",",$campiObbligatori);    	foreach((array)$request->campiRequest as $c) {    		$campiRequest[$c->nome] = $c->valore;    	}    	    	if($contesto == 'edit' and !$campiRequest['id']) {    		$return['errore'] .= "Il campo [id] � obbligatorio. ";    		return $return;    	}    	if($contesto == 'edit' and $campiRequest['id'] > 0) {    		//prendo i valori precedenti per non dover nuovamente chiedere tutti i dati obbligatori non comunicati    		$istanzaOggetto = mostraDatoOggetto($campiRequest['id'], $this->getIdOggetto($tipo), '*');    		if($istanzaOggetto['id'] and $istanzaOggetto[$this->getCampoEnte($request->value['tipo'])] == $this->utenteEnte['id_ente_admin']) {    			//metto i campi obbligatori uguali a quelli presenti su DB (tranne quelli eevntualmente comunicati)    			foreach((array)$campiObbligatori as $obb) {		    		if($campiRequest[$obb] == '') {		    			$campiRequest[$obb] = $istanzaOggetto[$obb];		    		}		    	}    		} else {    			$return['errore'] = "Impossibile modificare il record: permesso negato. (err. 2)";    			return $return;    		}    	}    	//inizio controllo dei campi obbligatori    	foreach((array)$campiObbligatori as $obb) {    		if($campiRequest[$obb] == '') {    			$return['errore'] .= "Il campo [".$obb."] � obbligatorio. ";    		}		}    	if($return['errore'] != '') {    		return $return;    	}    	//fine controllo dei campi obbligatori    	    	//inserimento campi: elaboro solo quelli inseribili    	$campiInseribili = $this->getCampiOggetto($tipo);		$campiInseribili = explode(",",$campiInseribili);    	$campiRiferimento = $this->getCampiRiferimento($tipo);		$campiRiferimento = explode(",",$campiRiferimento);    	foreach((array)$campiRequest as $nome => $valore) {    		if(in_array($nome, $campiInseribili)) {    			if(!($contesto == 'insert' and $nome == 'id')) {					$insert['campi'][] = $nome;	    			if($this->getTipoCampo($nome,$tipo) != 'string') {	    				if(!is_numeric($valore)){	    					$return['errore'] .= "Il campo [".$nome."] deve essere un intero. (".$nome." - ".$tipo." => ".$this->getTipoCampo($nome,$tipo).")";	    				}						$insert['valori'][$nome] = $valore;	    			} else {	    				$insert['valori'][$nome] = "'".addslashes($valore)."'";	    			}    			}    		}    		if(in_array($nome, $campiRiferimento)) {    			//verificare se il valore passato � dello stesso ente    			$identificativi = explode(",",$valore);    			foreach((array)$identificativi as $id) {    				if($this->utenteEnte['id_ente_admin'] != mostraDatoOggetto($id, $this->getIdOggettoCampo($tipo, $nome), 'id_ente')) {    					$return['errore'] = "Impossibile modificare il record: permesso negato. (err. 3: ID ".mostraDatoOggetto($id, $this->getIdOggettoCampo($tipo, $nome), 'id_ente')."[".$tipo."-".$nome."] non valido)";    					return $return;    				}    			}    		}    	}    	if($return['errore'] != '') {    		return $return;    	}    	    	if($contesto == 'insert') {	    	//inserimento uguale per tutti	    	$inserimento = $this->insert($insert, $request);	    	return $inserimento;    	} else {    		if(mostraDatoOggetto($insert['valori']['id'], $this->getIdOggetto($tipo), $this->getCampoEnte($tipo)) != $this->utenteEnte['id_ente_admin']) {    			$return['errore'] = "Impossibile modificare il record. Permesso negato. ";				return $return;			}    		//update    		$update = $this->update($insert, $request);	    	return $update;    	}    	    }        function pulisciNomeFile($valore) {    	$valore = str_replace( "�", "_", $valore);		$valore = str_replace( "^", "_", $valore);		$valore = str_replace( "�", "_", $valore);		$valore = str_replace( "'", "_", $valore);		$valore = str_replace( "\"", "_", $valore);		$valore = str_replace( "\"", '_', $valore);		$valore = str_replace( "�", '_', $valore);		$valore = str_replace( "�", '_', $valore);		$valore = str_replace( " ", '_', $valore);		return $valore;    }        /**     * funzione di inserimento record in db: restituisce l'oggetto appena inserito     */    function insert($insert, $request) {    	global $dati_db,$database,$configurazione;    	    	$dataInsert = mktime();        $nomicampi = "stato,id_proprietario,permessi_lettura,tipo_proprietari_lettura,id_proprietari_lettura,permessi_admin,tipo_proprietari_admin,id_proprietari_admin,data_creazione,ultima_modifica,id_sezione,id_lingua,numero_letture,template,".$this->getCampoEnte($request->value['tipo']);		$valoricampi = "1,".$this->utenteEnte['id'].",'N/A','tutti','-1','N/A','tutti','-1',".$dataInsert.",".$dataInsert.",0,0,0,'istanza',".$this->utenteEnte['id_ente_admin'];				$campi = '';		$valori = '';				$campiRequest = array();    	foreach((array)$request->campiRequest as $c) {    		$campiRequest[$c->nome] = $c->valore;    	}				//verifica e salvataggio campi allegati		$tipo = $request->value['tipo'];		$allegatiSalvati = array();		$progressivo = 1;		$campiAllegati = explode(",", $this->getCampiAllegati($tipo));    	foreach((array)$campiRequest as $nome => $valore) {    		if(in_array($nome, $campiAllegati)) {    			//salvare il file da webservice su filesystem    			$nomeAllegato = "nome_file_".$nome;    			if($campiRequest[$nomeAllegato] != '') {    				$allegatiSalvati[$nomeAllegato] = $dataInsert.$progressivo."O__O".($this->pulisciNomeFile($campiRequest[$nomeAllegato]));    			} else {    				$allegatiSalvati[$nomeAllegato] = $dataInsert.$progressivo."O__O".$nome;    			}    			$contenuto = '';    			$contenuto = base64_decode($valore);				$ris = file_put_contents("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$allegatiSalvati[$nomeAllegato], $contenuto);								$insert['valori'][$nome] = "'".addslashes($allegatiSalvati[$nomeAllegato])."'";								$progressivo++;    		}    	}				foreach((array)$insert['campi'] as $nome) {			$campi .= ",".$nome;			$valori .= ",".$insert['valori'][$nome];		}				$insert['campi'] = "(".$nomicampi.$campi.")";		$insert['valori'] = "(".$valoricampi.$valori.")";                $queryIns = "INSERT INTO ".$dati_db['prefisso'].$this->getTabellaOggetto($request->value['tipo'])." ".$insert['campi'].					" VALUES ".$insert['valori'];   		   		if( !($result = $database->connessioneConReturn($queryIns)) ) {            $return['errore'] = "Errore nell'inserimento dei dati: ";            file_put_contents('temp/debugws.html', date('d/m/Y h:s').' - '.$queryIns.'<br />', FILE_APPEND);            //cancellazione degli allegati inseriti            foreach((array)$allegatiSalvati as $allegato) {            	@unlink("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$allegato);            }                        return $return;        } else {        	//inserimento riuscito        	$campiOggetto = $this->getCampiOggetto($request->value['tipo']);        	$query = "SELECT ".$campiOggetto." FROM ".$dati_db['prefisso'].$this->getTabellaOggetto($request->value['tipo']).					" WHERE ".$this->getCampoEnte($request->value['tipo'])." = ".$this->utenteEnte['id_ente_admin'].					" AND id_proprietario = ".$this->utenteEnte['id'].					" AND data_creazione = ".$dataInsert.					" AND ultima_modifica = ".$dataInsert.					" ORDER BY id DESC LIMIT 1";						if( !($result = $database->connessioneConReturn($query)) ) {            	$return['errore'] = "Errore nella selezione dei dati";				file_put_contents('temp/debugws.html', date('d/m/Y h:s').' - '.$query.'<br />', FILE_APPEND);            	return $return;	        }	        $istanzeDB = $database->sqlArrayAss($result, MYSQL_ASSOC);	        if(!$istanzeDB) {	            $return['errore'] = "Nessun risultato";	            return $return;	        }		        $ret = $this->utf8_encode_recursive($istanzeDB);	        $return['record'] = $ret;	        $return['query'] = $queryIns;	        return $return;        }    }        /**     * funzione di modifica record in db: restituisce l'oggetto appena modificato     */    function update($insert, $request) {    	global $dati_db,$database,$configurazione;    	    	$dataInsert = mktime();        $stringaUpdate = $this->getCampoEnte($request->value['tipo'])." = ".$this->utenteEnte['id_ente_admin'];				$campiRequest = array();    	foreach((array)$request->campiRequest as $c) {    		$campiRequest[$c->nome] = $c->valore;    	}				//verifica e salvataggio campi allegati		$tipo = $request->value['tipo'];		$allegatiSalvati = array();		$progressivo = 1;		$campiAllegati = explode(",", $this->getCampiAllegati($tipo));		$filesDaEliminare = array();    	foreach((array)$campiRequest as $nome => $valore) {    		if(in_array($nome, $campiAllegati)) {				if($campiRequest[$nome] == '') {					$filePrecedente = mostraDatoOggetto($campiRequest['id'], $this->getIdOggetto($tipo), $nome);					if($filePrecedente != '' and file_exists("download/".$this->getTabellaOggetto($tipo)."/".$filePrecedente)) {						$filesDaEliminare[] = $filePrecedente;					}				} else {					//salvare il file da webservice su filesystem, eliminando eventualmente il file precedente					$filePrecedente = mostraDatoOggetto($campiRequest['id'], $this->getIdOggetto($tipo), $nome);					if($filePrecedente != '' and file_exists("download/".$this->getTabellaOggetto($tipo)."/".$filePrecedente)) {						$filesDaEliminare[] = $filePrecedente;					}					$nomeAllegato = "nome_file_".$nome;					if($campiRequest[$nomeAllegato] != '') {						$allegatiSalvati[$nomeAllegato] = $dataInsert.$progressivo."O__O".($this->pulisciNomeFile($campiRequest[$nomeAllegato]));					} else {						$allegatiSalvati[$nomeAllegato] = $dataInsert.$progressivo."O__O".$nome;					}					$contenuto = '';					$contenuto = base64_decode($valore);					$ris = file_put_contents("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$allegatiSalvati[$nomeAllegato], $contenuto);									$insert['valori'][$nome] = "'".addslashes($allegatiSalvati[$nomeAllegato])."'";										$progressivo++;				}    		}    	}				foreach((array)$insert['campi'] as $nome) {			$stringaUpdate .= ", ".$nome." = ".$insert['valori'][$nome];		}		        $queryUp = "UPDATE ".$dati_db['prefisso'].$this->getTabellaOggetto($request->value['tipo'])." SET ".$stringaUpdate.					" WHERE id = ".$insert['valori']['id'];   		   		if( !($result = $database->connessioneConReturn($queryUp)) ) {            $return['errore'] = "Errore nella modifica dei dati";			file_put_contents('temp/debugws.html', date('d/m/Y h:s').' - '.$queryUp.'<br />', FILE_APPEND);			//cancellazione degli allegati inseriti            foreach((array)$allegatiSalvati as $allegato) {            	@unlink("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$allegato);            }			            return $return;        } else {					//cancellazione degli vecchi allegati            foreach((array)$filesDaEliminare as $allegato) {            	@unlink("download/".$this->getTabellaOggetto($request->value['tipo'])."/".$allegato);            }		        	//inserimento riuscito        	$campiOggetto = $this->getCampiOggetto($request->value['tipo']);        	$query = "SELECT ".$campiOggetto." FROM ".$dati_db['prefisso'].$this->getTabellaOggetto($request->value['tipo']).					" WHERE id = ".$insert['valori']['id'];						if( !($result = $database->connessioneConReturn($query)) ) {            	$return['errore'] = "Errore nella selezione dei dati";				file_put_contents('temp/debugws.html', date('d/m/Y h:s').' - '.$query.'<br />', FILE_APPEND);            	return $return;	        }	        $istanzeDB = $database->sqlArrayAss($result, MYSQL_ASSOC);	        if(!$istanzeDB) {	            $return['errore'] = "Nessun risultato";	            return $return;	        }		        $ret = $this->utf8_encode_recursive($istanzeDB);	        $return['record'] = $ret;	        $return['query'] = $queryUp;	        return $return;        }    }        /**     * verifica se la combinazione token user � corretta     */    function isAuthenticated($token, $username, $auth = 1) {        global $dati_db,$database,$configurazione;        $query = "SELECT * FROM ".$dati_db['prefisso']."utenti WHERE username = '$username'";        if( !($result = $database->connessioneConReturn($query)) ) {            $message = "errore";        }        $istanzeDB = $database->sqlArrayAss($result, MYSQL_ASSOC);        foreach((array)$istanzeDB as $utente) {        	$query = "SELECT * FROM ".$dati_db['prefisso']."etrasp_enti WHERE id = ".$utente['id_ente_admin'];	        if( !($result = $database->connessioneConReturn($query)) ) {	        }	        $ente = $database->sqlArray($result, MYSQL_ASSOC);	        if($token == md5($utente['username'].$ente['chiave_webservice'])) {	        	$this->utenteEnte = $utente;	            return true;	        }        }        return false;    }        /**     * funzione che mi restituisce la tabella del tipo passato nella request     */	function getTabellaOggetto($tipo) {        switch($tipo) {        	case "strutture":        		return "oggetto_uffici";        	break;        	case "personale":        		return "oggetto_riferimenti";        	break;        	case "commissioni":        		return "oggetto_commissioni";        	break;        	case "societa":        		return "oggetto_societa";        	break;        	case "procedimenti":        		return "oggetto_procedimenti";        	break;        	case "regolamenti":        		return "oggetto_regolamenti";        	break;        	case "modulistica":        		return "oggetto_modulistica_regolamenti";        	break;        	case "normativa":        		return "oggetto_normativa";        	break;        	case "bilanci":        		return "oggetto_binalci";        	break;        	case "fornitori":        		return "oggetto_elenco_fornitori";        	break;        	case "gare":        		return "oggetto_gare_atti";        	break;        	case "requisiti":        		return "oggetto_bandi_requisiti_qualificazione";        	break;        	case "concorsi":        		return "oggetto_concorsi";        	break;        	case "sovvenzioni":        		return "oggetto_sovvenzioni";        	break;        	case "incarichi":        		return "oggetto_incarichi";        	break;        	case "provvedimenti":        		return "oggetto_provvedimenti";        	break;        	case "oneri":        		return "oggetto_oneri";        	break;        }        return "";    }        /**     * funzione che mi restituisce la tabella del tipo e del campo passato      */	function getIdOggettoCampo($tipo, $campo) {        switch($tipo) {        	case "strutture":        		switch($campo) {        			case "struttura":        				return 13;        			break;        			case "referente":        			case "referenti_contatti":        				return 3;        			break;        		}        	break;        	case "personale":        		switch($campo) {        			case "incarico":        				return 4;        			break;        			case "uffici":        				return 13;        			break;        		}        	break;        	case "commissioni":        		switch($campo) {        			case "presidente":        			case "vicepresidente":        			case "segretari":        			case "membro":        			case "membri":        				return 3;        			break;        		}        	break;        	case "societa":        		switch($campo) {        			case "rappresentanti":        				return 3;        			break;        		}        	break;        	case "procedimenti":        		case "referente_proc":        			case "referente_prov":        			case "resp_sost":        			case "personale_proc":        				return 3;        			break;        			case "ufficio_def":        			case "ufficio":        				return 13;        			break;        			case "norme":        				return 27;        			break;        	break;        	case "regolamenti":        		switch($campo) {        			case "strutture":        				return 13;        			break;        			case "procedimenti":        				return 16;        			break;        		}        	break;        	case "modulistica":        		switch($campo) {        			case "procedimenti":        				return 16;        			break;        		}        	break;        	case "normativa":        		switch($campo) {        			case "uffici":        				return 13;        			break;        		}        	break;        	case "gare":        		switch($campo) {        			case "struttura":        				return 13;        			break;        			case "requisiti_qualificazione":        				return 21;        			break;        			case "bando_collegato":        				return 11;        			break;        			case "elenco_partecipanti":        			case "elenco_aggiudicatari":        				return 41;        			break;        		}        	break;        	case "sovvenzioni":        		switch($campo) {        			case "struttura":        				return 13;        			break;        			case "responsabile":        				return 3;        			break;        			case "normativa":        				return 27;        			break;        			case "regolamento":        				return 19;        			break;        		}        	break;        	case "incarichi":        		switch($campo) {        			case "struttura":        				return 13;        			break;        		}        	break;        	case "provvedimenti":        		switch($campo) {        			case "struttura":        				return 13;        			break;        		}        	break;        	case "oneri":        		switch($campo) {        			case "procedimenti":        				return 16;        			break;        			case "provvedimenti":        				return 28;        			break;        			case "normativa":        				return 27;        			break;        			case "regolamenti":        				return 19;        			break;        		}        	break;        }    }        /**     * funzione che mi restituisce il campo dell'identificativo dell'ente (ente_id o id_ente)     */    function getCampoEnte($tipo) {        switch($tipo) {        	case "utenti":        		return "id_ente_admin";        	break;        	default:        		return "id_ente";        	break;        }    }	/**	 * funzione usata nella select per restituire i campi delle tabelle	 */    function getCampiOggetto($tipo) {        $campi = "id,id_ori";        switch($tipo) {        	case "strutture":        		$campi .= ",nome_ufficio,struttura,referente,referenti_contatti,email_riferimento,email_certificate,telefono,fax,desc_att,orari,articolazione,pres_sede,ordine";        	break;        	case "personale":        		$campi .= ",referente,organo,commissioni,ruolo,ruolo_politico,allegato_nomina,incarico";        		$campi .= ",determinato,uffici,foto,telefono,mobile,fax,email,email_cert";        		$campi .= ",note,vis_elenchi,priorita,curriculum,retribuzione,altre_cariche";        		$campi .= ",patrimonio,archivio,carica_inizio,carica_fine";        	break;        	case "commissioni":        		$campi .= ",nome,tipo,presidente,vicepresidente,segretari,membro,descrizione,membri,note,immagine,email,telefono,fax,indirizzo,ordine";        	break;        	case "societa":        		$campi .= ",ragione,tipologia,misura,durata,oneri_anno,descrizione,rappresentanti,incarichi_trattamento,indirizzo_web,bilancio,bilancio_allegato";        	break;        	case "procedimenti":        		$campi .= ",nome,referente_proc,referente_prov,resp_sost,ufficio_def,personale_proc,contattare,ufficio,descrizione,costi,silenzio_assenzo,dichiarazione,norme,termine,link_servizio,tempi_servizio";        	break;        	case "regolamenti":        		$campi .= ",titolo,tipo,strutture,procedimenti,descrizione_mod,allegato,allegato_2,allegato_3,allegato_4,allegato_5,allegato_6,ordine";        	break;        	case "modulistica":        		$campi .= ",titolo,procedimenti,allegato,allegato_1,descrizione_mod,ordine";        	break;        	case "normativa":        		$campi .= ",nome,uffici,link,desc_cont,allegato_1,allegato_2,allegato_3,allegato_4";        	break;        	case "bilanci":        		$campi .= ",nome,tipologia,anno,descrizione";    			$campi .= ",allegato1,allegato2,allegato3,allegato4,allegato5,allegato6,allegato7,allegato8,allegato9,allegato10,allegato11,allegato12,allegato13,allegato14,allegato15";        	break;        	case "fornitori":        		$campi .= ",nominativo,codice_fiscale,fiscale_estero,indirizzo,telefono,fax,email";        	break;        	case "gare":        		$campi .= ",tipologia,contratto,denominazione_aggiudicatrice,dati_aggiudicatrice,tipo_amministrazione,sede_provincia,sede_comune,sede_indirizzo,senza_importo";        		$campi .= ",valore_base_asta,valore_importo_aggiudicazione,importo_liquidato,data_attivazione,data_scadenza,data_scadenza_esito,data_inizio_lavori,data_lavori_fine";        		$campi .= ",requisiti_qualificazione,codice_cpv,codice_scp,url_scp,cig,bando_collegato,oggetto,dettagli,scelta_contraente,elenco_partecipanti,elenco_aggiudicatari";        		$campi .= ",allegato1,allegato2,allegato3,allegato4,allegato5,allegato6,allegato7,allegato8,allegato9,allegato10,allegato11,allegato12,allegato13,allegato14";        		$campi .= ",allegato15,allegato16,allegato17,allegato18,allegato19,allegato20";        	break;        	case "requisiti":        		$campi .= ",codice,denominazione";        	break;        	case "concorsi":        		$campi .= ",oggetto,data_attivazione,data_scadenza,orario_scadenza,dipendenti_assunti,spesa_prevista,spese_fatte,descrizione,allegato1,alelgato2,allegato3,allegato4";        		$campi .= ",allegato5,allegato6,allegato7,allegato8,allegato9,allegato10,allegato11,allegato12,allegato13,allegato14,allegato15,allegato16,allegato17,allegato18,allegato19,allegato20";        	break;        	case "sovvenzioni":        		$campi .= ",nominativo,dati_fiscali,struttura,responsabile,data,oggetto,compenso,normativa,regolamento,note,modo_individuazione,file_atto,progetto,cv_soggetto";        	break;        	case "incarichi":        		$campi .= ",nominativo,oggetto,tipo_incarico,dirigente,struttura,inizio_incarico,fine_incarico,compenso,compenso_erogato,compenso_variabile,note,estremi_atti";        		$campi .= ",file_atto,progetto,cv_soggetto,verifica_conflitto";        	break;        	case "provvedimenti":        		$campi .= ",numero,oggetto,tipo,struttura,data,contenuto,spesa,estremi,allegato1,allegato2,allegato3,allegato4";        	break;        	case "oneri":        		$campi .= ",tipo,titolo,descrizione,procedimenti,provvedimenti,normativa,regolamenti,info,allegato1,allegato2,allegato3,allegato4";        	break;        	default:        		//tipo sbagliato        		return "";        	break;        }        return $campi;    }        /**	 * funzione usata per ritornare i campi riferimento per ogni oggetto	 */    function getCampiRiferimento($tipo) {        $campi = "";        switch($tipo) {        	case "strutture":        		$campi .= "struttura,referente,referenti_contatti";        	break;        	case "personale":        		$campi .= "incarico,uffici";        	break;        	case "commissioni":        		$campi .= "presidente,vicepresidente,segretari,membro,membri";        	break;        	case "societa":        		$campi .= "rappresentanti";        	break;        	case "procedimenti":        		$campi .= "referente_proc,referente_prov,resp_sost,ufficio_def,personale_proc,ufficio,norme";        	break;        	case "regolamenti":        		$campi .= "strutture,procedimenti";        	break;        	case "modulistica":        		$campi .= "procedimenti";        	break;        	case "normativa":        		$campi .= "uffici";        	break;        	case "bilanci":        		$campi .= "";        	break;        	case "fornitori":        		$campi .= "";        	break;        	case "gare":        		$campi .= "bando_collegato,elenco_partecipanti,elenco_aggiudicatari";        	break;        	case "requisiti":        		$campi .= "";        	break;        	case "concorsi":        		$campi .= "";        	break;        	case "sovvenzioni":        		$campi .= "struttura,responsabile,normativa,regolamento";        	break;        	case "incarichi":        		$campi .= "struttura";        	break;        	case "provvedimenti":        		$campi .= "struttura";        	break;        	case "oneri":        		$campi .= "procedimenti,provvedimenti,normativa,regolamenti";        	break;        }        return $campi;    }        /**	 * funzione usata per ritornare i campi obbligatori di un determinato archivio	 */    function getCampiObbligatori($tipo) {        $campi = "";        switch($tipo) {        	case "strutture":        		$campi .= "nome_ufficio,referente,email_riferimento,desc_att";        	break;        	case "personale":        		$campi .= "referente,email,priorita";        	break;        	case "commissioni":        		$campi .= "nome,tipo";        	break;        	case "societa":        		$campi .= "ragione,tipologia";        	break;        	case "procedimenti":        		$campi .= "nome,referente_proc,referente_prov,resp_sost,ufficio_def";        	break;        	case "regolamenti":        		$campi .= "titolo,allegato";        	break;        	case "modulistica":        		$campi .= "titolo,allegato";        	break;        	case "normativa":        		$campi .= "nome";        	break;        	case "bilanci":        		$campi .= "nome,tipologia,anno,allegato1";        	break;        	case "fornitori":        		$campi .= "nominativo,codice_fiscale";        	break;        	case "gare":        		$campi .= "tipologia,data_attivazione,oggetto";        	break;        	case "requisiti":        		$campi .= "";        	break;        	case "concorsi":        		$campi .= "oggetto,data_attivazione,data_scadenza";        	break;        	case "sovvenzioni":        		$campi .= "nominativo,dati_fiscali,struttura,responsabile,data,oggetto,compenso,modo_individuazione,file_atto";        	break;        	case "incarichi":        		$campi .= "nominativo,oggetto,tipo_incarico,compenso,file_atto";        	break;        	case "provvedimenti":        		$campi .= "oggetto,tipo,data";        	break;        	case "oneri":        		$campi .= "tipo,titolo,descrizione";        	break;        	default:        		//tipo sbagliato        		return "";        	break;        }        return $campi;    }        /**	 * funzione usata per ritornare l'id di un oggetto dato il tipo	 */    function getIdOggetto($tipo) {        switch($tipo) {        	case "strutture":        		return 13;        	break;        	case "personale":        		return 3;        	break;        	case "commissioni":        		return 43;        	break;        	case "societa":        		return 44;        	break;        	case "procedimenti":        		return 16;        	break;        	case "regolamenti":        		return 19;        	break;        	case "modulistica":        		return 5;        	break;        	case "normativa":        		return 27;        	break;        	case "bilanci":        		return 29;        	break;        	case "fornitori":        		return 41;        	break;        	case "gare":        		return 11;        	break;        	case "requisiti":        		return 21;        	break;        	case "concorsi":        		return 22;        	break;        	case "sovvenzioni":        		return 38;        	break;        	case "incarichi":        		return 4;        	break;        	case "provvedimenti":        		return 28;        	break;        	case "oneri":        		return 30;        	break;        }    }        /**	 * funzione usata per ritornare i campi allegato di un determinato archivio	 */    function getCampiAllegati($tipo) {        $campi = "";        switch($tipo) {        	case "personale":        		$campi .= "allegato_nomina,foto,curriculum,retribuzione,altre_cariche,patrimonio";        	break;        	case "commissioni":        		$campi .= "immagine";        	break;        	case "societa":        		$campi .= "bilancio_allegato";        	break;        	case "regolamenti":        		$campi .= "allegato,allegato_2,allegato_3,allegato_4,allegato_5,allegato_6";        	break;        	case "modulistica":        		$campi .= "allegato,allegato_1";        	break;        	case "normativa":        		$campi .= "allegato_1,allegato_2,allegato_3,allegato_4";        	break;        	case "bilanci":        		$campi .= "allegato1,allegato2,allegato3,allegato4,allegato5,allegato6,allegato7,allegato8,allegato9,allegato10,allegato11,allegato12,allegato13,allegato14,allegato15";        	break;        	case "gare":        		$campi .= "allegato1,allegato2,allegato3,allegato4,allegato5,allegato6,allegato7,allegato8,allegato9,allegato10,allegato11,allegato12,allegato13,allegato14";        		$campi .= ",allegato15,allegato16,allegato17,allegato18,allegato19,allegato20,allegato21,allegato22";        	break;        	case "concorsi":        		$campi .= "allegato1,alelgato2,allegato3,allegato4,allegato5,allegato6,allegato7,allegato8,allegato9,allegato10";        		$campi .= ",allegato11,allegato12,allegato13,allegato14,allegato15,allegato16,allegato17,allegato18,allegato19,allegato20";        	break;        	case "sovvenzioni":        		$campi .= "file_atto,progetto,cv_soggetto";        	break;        	case "incarichi":        		$campi .= "file_atto,progetto,cv_soggetto,verifica_conflitto";        	break;        	case "provvedimenti":        		$campi .= "allegato1,allegato2,allegato3,allegato4";        	break;        	case "oneri":        		$campi .= "allegato1,allegato2,allegato3,allegato4";        	break;        }        return $campi;    }        /**     * passando il $tipo = oggetto da verificare e il $campo = campo vero e proprio     *  restituisce il suo tipo di dato (string/int)     */    function getTipoCampo($campo, $tipo) {        switch($tipo) {        	case "strutture":        		switch($campo) {        			case "nome_ufficio":        			case "referenti_contatti":        			case "email_riferimento":        			case "email_certificate":        			case "telefono":        			case "fax":        			case "desc_att":        			case "orari":        			case "pres_sede":        				return "string";        			break;        		}        	break;			case "personale":				switch($campo) {					case "referente":					case "organo":					case "commissioni":					case "ruolo":					case "ruolo_politico":					case "allegato_nomina":					case "uffici":					case "foto":					case "telefono":					case "mobile":					case "fax":					case "email":					case "email_cert":					case "note":					case "curriculum":					case "retribuzione":					case "altre_cariche":					case "patrimonio":						return "string";					break;				}			break;			case "commissioni":				switch($campo) {					case "nome":					case "tipo":					case "segretari":					case "descrizione":					case "membri":					case "note":					case "immagine":					case "email":					case "telefono":					case "fax":					case "indirizzo":						return "string";					break;					}			break;			case "societa":				switch($campo) {					case "ragione":					case "tipologia":					case "misura":					case "durata":					case "oneri_anno":					case "descrizione":					case "rappresentanti":					case "incarichi_trattamento":					case "indirizzo_web":					case "bilancio":					case "bilancio_allegato":						return "string";					break;					}			break;			case "procedimenti":				switch($campo) {					case "nome":					case "referente_proc":					case "referente_prov":					case "resp_sost":					case "ufficio_def":					case "personale_proc":					case "contattare":					case "ufficio":					case "descrizione":					case "costi":					case "norme":					case "termine":					case "link_servizio":					case "tempi_servizio":						return "string";					break;					}			break;			case "regolamenti":				switch($campo) {					case "titolo":					case "tipo":					case "strutture":					case "procedimenti":					case "descrizione_mod":					case "allegato":					case "allegato_2":					case "allegato_3":					case "allegato_4":					case "allegato_5":					case "allegato_6":						return "string";					break;					}			break;        	case "modulistica":        		switch($campo) {        			case "titolo":        			case "procedimenti":        			case "allegato":        			case "allegato_1":        			case "descrizione_mod":        				return "string";        			break;        		}        	break;			case "normativa":				switch($campo) {					case "nome":					case "uffici":					case "link":					case "desc_cont":					case "allegato_1":					case "allegato_2":					case "allegato_3":					case "allegato_4":						return "string";					break;					}			break;			case "bilanci":				switch($campo) {					case "nome":					case "tipologia":					case "descrizione":					case "allegato1":					case "allegato2":					case "allegato3":					case "allegato4":					case "allegato5":					case "allegato6":					case "allegato7":					case "allegato8":					case "allegato9":					case "allegato10":					case "allegato11":					case "allegato12":					case "allegato13":					case "allegato14":					case "allegato15":						return "string";					break;					}			break;			case "fornitori":				switch($campo) {					case "nominativo":					case "codice_fiscale":					case "fiscale_estero":					case "indirizzo":					case "telefono":					case "fax":					case "email":						return "string";					break;					}			break;			case "gare":				switch($campo) {					case "tipologia":					case "contratto":					case "denominazione_aggiudicatrice":					case "dati_aggiudicatrice":					case "tipo_amministrazione":					case "sede_provincia":					case "sede_comune":					case "sede_indirizzo":					case "senza_importo":					case "codice_cpv":					case "codice_scp":					case "url_scp":					case "cig":					case "oggetto":					case "dettagli":					case "scelta_contraente":					case "elenco_partecipanti":					case "elenco_aggiudicatari":					case "allegato1":					case "allegato2":					case "allegato3":					case "allegato4":					case "allegato5":					case "allegato6":					case "allegato7":					case "allegato8":					case "allegato9":					case "allegato10":					case "allegato11":					case "allegato12":					case "allegato13":					case "allegato14":					case "allegato15":					case "allegato16":					case "allegato17":					case "allegato18":					case "allegato19":					case "allegato20":					case "allegato21":					case "allegato22":						return "string";					break;					}			break;			case "concorsi":				switch($campo) {					case "oggetto":					case "orario_scadenza":					case "spesa_prevista":					case "spese_fatte":					case "descrizione":					case "allegato1":					case "alelgato2":					case "allegato3":					case "allegato4":					case "allegato5":					case "allegato6":					case "allegato7":					case "allegato8":					case "allegato9":					case "allegato10":					case "allegato11":					case "allegato12":					case "allegato13":					case "allegato14":					case "allegato15":					case "allegato16":					case "allegato17":					case "allegato18":					case "allegato19":					case "allegato20":						return "string";					break;					}			break;			case "sovvenzioni":				switch($campo) {					case "nominativo":					case "dati_fiscali":					case "oggetto":					case "compenso":					case "note":					case "modo_individuazione":					case "file_atto":					case "progetto":					case "cv_soggetto":						return "string";					break;					}			break;			case "incarichi":				switch($campo) {					case "nominativo":					case "oggetto":					case "tipo_incarico":					case "compenso":					case "compenso_erogato":					case "compenso_variabile":					case "note":					case "estremi_atti":					case "file_atto":					case "progetto":					case "cv_soggetto":					case "verifica_conflitto":						return "string";					break;					}			break;			case "provvedimenti":				switch($campo) {					case "numero":					case "oggetto":					case "tipo":					case "contenuto":					case "spesa":					case "estremi":					case "allegato1":					case "allegato2":					case "allegato3":					case "allegato4":						return "string";					break;					}			break;			case "oneri":				switch($campo) {					case "tipo":					case "titolo":					case "descrizione":					case "procedimenti":					case "provvedimenti":					case "normativa":					case "regolamenti":					case "info":					case "allegato1":					case "allegato2":					case "allegato3":					case "allegato4":						return "string";					break;					}			break;        }        //non � stringa non deve fare la LIKE        return "int";    }    	/**	 * funzione usata per aggiungere eventuali condizioni sulle select	 */        function elaboraCondizioni($arrayCondizioni, $tipo) {    	    	$condizione = array();    	$campi = $this->getCampiOggetto($tipo);    	$campi = explode(",", $campi);    	foreach((array)$arrayCondizioni as $cond) {    		$campo = $cond->nome;    		$valore = $cond->valore;			if($campo != '') {				if(in_array($campo, $campi)) {					if($this->getTipoCampo($campo, $tipo) == 'string') {						$condizione['condizione'] .= " AND (".$campo." LIKE '%".addslashes($valore)."%') ";					} else {						$condizione['condizione'] .= " AND (".$campo." = '".addslashes($valore)."') ";					}				} else {					$condizione['errore'] = "campo_non_valido";					$condizione['campo_non_valido'] = $campo;					$condizione['condizione'] = "";				}			}    	}    	return $condizione;    }        /**     * messaggio restituito quando non si hanno i permessi per una certa operazione richiesta     */    function permessiNegatiResponse($message = "Non si hanno i permessi. Autorizzazione negata.") {        $response = new ResponseWS();        $response->message = $message;        return $response;    }	/**	 * funzione applicata a tutti i dati restituiti dal webservice	 */    function utf8_encode_recursive($input, $encode_keys=true) {        if(is_array($input)) {            $result = array();            foreach($input as $k => $v) {                $key = ($encode_keys)? utf8_encode($k) : $k;                $result[$key] = $this->utf8_encode_recursive( $v, $encode_keys);            }        }        else {            $result = utf8_encode($input);        }        return $result;    }	    /**     * sistema i valori passati alla request in modo che la stessa abbia sempre la stessa struttura     */    function fixRequest($request) {	    	$request->value = array();        $request->campiRequest = array();                if(!is_array($request->valori)) {        	$valori = $request->valori;        	$request->valori = array();        	$request->valori[0] = $valori;        }        foreach((array)$request->valori as $valore) {        	$request->value[$valore->chiave] = $valore->valore;        }        if(!is_array($request->campi)) {        	$campi = $request->campi;        	$request->campi = array();        	$request->campi[0] = $campi;        }        foreach((array)$request->campi as $campo) {			unset($valore);			$valore->nome = ($campo->nome);			$valore->valore = utf8_decode($campo->valore);        	$request->campiRequest[] = $valore;        }            	return $request;    }        function logRequest($request, $response, $metodoWS) {    	global $dati_db,$database,$configurazione;    	    	try {    		if($this->utenteEnte['id_ente_admin'] == '') {    			$this->utenteEnte['id_ente_admin'] = 0;				$this->utenteEnte['id'] = 0;    		}        					$sql = "INSERT INTO log_chiamate_ws (" .					" id_ente_admin," .					" id_utente," .					" data_azione," .					" tipo_operazione," .					" request," .					" response" .					" ) VALUES (" .					" '".$this->utenteEnte['id_ente_admin']."'," .					" ".$this->utenteEnte['id']."," .					" ".mktime()."," .					" '".addslashes($metodoWS)."'," .					" '".addslashes(serialize($request))."'," .					" '".addslashes(serialize($response))."'" .					" )";			if ( !($risultato = $database->connessioneConReturn($sql)) ) {				$fileReport = fopen("temp/reportWebServices.log", "a+");				fwrite($fileReport, $sql."/n/r");				fclose($fileReport);			}					} catch( Exception $e ) {}    	return;    }}ini_set("soap.wsdl_cache_enabled", "0"); // disabling WSDL cache$server = new SoapServer($server_url."webservice/webservice.wsdl");$server->setClass("ServerWS");$server->handle();// Chiudo la connessione al database$database->sqlChiudi();?>